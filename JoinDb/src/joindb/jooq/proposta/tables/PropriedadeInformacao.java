/*
 * This file is generated by jOOQ.
 */
package joindb.jooq.proposta.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import joindb.jooq.proposta.Indexes;
import joindb.jooq.proposta.Keys;
import joindb.jooq.proposta.Proposta;
import joindb.jooq.proposta.tables.records.PropriedadeInformacaoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PropriedadeInformacao extends TableImpl<PropriedadeInformacaoRecord> {

    private static final long serialVersionUID = 2064217389;

    /**
     * The reference instance of <code>proposta.propriedade_informacao</code>
     */
    public static final PropriedadeInformacao PROPRIEDADE_INFORMACAO = new PropriedadeInformacao();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropriedadeInformacaoRecord> getRecordType() {
        return PropriedadeInformacaoRecord.class;
    }

    /**
     * The column <code>proposta.propriedade_informacao.id</code>. identificador unico da propriedade
O mesmo car pode ser usado para duas propriedades diferentes.
     */
    public final TableField<PropriedadeInformacaoRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "identificador unico da propriedade\nO mesmo car pode ser usado para duas propriedades diferentes.");

    /**
     * The column <code>proposta.propriedade_informacao.estado_id</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, Integer> ESTADO_ID = createField("estado_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proposta.propriedade_informacao.municipio_id</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, Integer> MUNICIPIO_ID = createField("municipio_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proposta.propriedade_informacao.propriedade_id</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, Integer> PROPRIEDADE_ID = createField("propriedade_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proposta.propriedade_informacao.cnpj</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, Long> CNPJ = createField("cnpj", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>proposta.propriedade_informacao.nome_propriedade</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, String> NOME_PROPRIEDADE = createField("nome_propriedade", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>proposta.propriedade_informacao.cpf</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, Long> CPF = createField("cpf", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>proposta.propriedade_informacao.nome_proprietario</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, String> NOME_PROPRIETARIO = createField("nome_proprietario", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>proposta.propriedade_informacao.empreendimento_id</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, Long> EMPREENDIMENTO_ID = createField("empreendimento_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>proposta.propriedade_informacao.codigo_imovel</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, String> CODIGO_IMOVEL = createField("codigo_imovel", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>proposta.propriedade_informacao.modulo_count</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, BigDecimal> MODULO_COUNT = createField("modulo_count", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>proposta.propriedade_informacao.area</code>.
     */
    public final TableField<PropriedadeInformacaoRecord, BigDecimal> AREA = createField("area", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * Create a <code>proposta.propriedade_informacao</code> table reference
     */
    public PropriedadeInformacao() {
        this(DSL.name("propriedade_informacao"), null);
    }

    /**
     * Create an aliased <code>proposta.propriedade_informacao</code> table reference
     */
    public PropriedadeInformacao(String alias) {
        this(DSL.name(alias), PROPRIEDADE_INFORMACAO);
    }

    /**
     * Create an aliased <code>proposta.propriedade_informacao</code> table reference
     */
    public PropriedadeInformacao(Name alias) {
        this(alias, PROPRIEDADE_INFORMACAO);
    }

    private PropriedadeInformacao(Name alias, Table<PropriedadeInformacaoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PropriedadeInformacao(Name alias, Table<PropriedadeInformacaoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PropriedadeInformacao(Table<O> child, ForeignKey<O, PropriedadeInformacaoRecord> key) {
        super(child, key, PROPRIEDADE_INFORMACAO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proposta.PROPOSTA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROPRIEDADE_INFORMATION_PK, Indexes.UQ_PROPRIEDADE_INFORMATION_CNJP_CPF_NOME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PropriedadeInformacaoRecord> getPrimaryKey() {
        return Keys.PROPRIEDADE_INFORMATION_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PropriedadeInformacaoRecord>> getKeys() {
        return Arrays.<UniqueKey<PropriedadeInformacaoRecord>>asList(Keys.PROPRIEDADE_INFORMATION_PK, Keys.UQ_PROPRIEDADE_INFORMATION_CNJP_CPF_NOME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PropriedadeInformacao as(String alias) {
        return new PropriedadeInformacao(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PropriedadeInformacao as(Name alias) {
        return new PropriedadeInformacao(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PropriedadeInformacao rename(String name) {
        return new PropriedadeInformacao(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropriedadeInformacao rename(Name name) {
        return new PropriedadeInformacao(name, null);
    }
}
