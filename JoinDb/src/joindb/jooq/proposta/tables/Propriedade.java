/*
 * This file is generated by jOOQ.
 */
package joindb.jooq.proposta.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import joindb.jooq.proposta.Indexes;
import joindb.jooq.proposta.Keys;
import joindb.jooq.proposta.Proposta;
import joindb.jooq.proposta.tables.records.PropriedadeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.postgis.spatial.binding.PostgisGeometryBinding;
import org.postgis.Geometry;


/**
 * Armazena a propriedade em uma determinada data
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Propriedade extends TableImpl<PropriedadeRecord> {

    private static final long serialVersionUID = -463999273;

    /**
     * The reference instance of <code>proposta.propriedade</code>
     */
    public static final Propriedade PROPRIEDADE = new Propriedade();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropriedadeRecord> getRecordType() {
        return PropriedadeRecord.class;
    }

    /**
     * The column <code>proposta.propriedade.id</code>.
     */
    public final TableField<PropriedadeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proposta.propriedade.data</code>.
     */
    public final TableField<PropriedadeRecord, Date> DATA = createField("data", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>proposta.propriedade.estado_id</code>.
     */
    public final TableField<PropriedadeRecord, Integer> ESTADO_ID = createField("estado_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proposta.propriedade.municipio_id</code>.
     */
    public final TableField<PropriedadeRecord, Integer> MUNICIPIO_ID = createField("municipio_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proposta.propriedade.abatedouro</code>.
     */
    public final TableField<PropriedadeRecord, String> ABATEDOURO = createField("abatedouro", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>proposta.propriedade.geom</code>.
     */
    public final TableField<PropriedadeRecord, Geometry> GEOM = createField("geom", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "", new PostgisGeometryBinding());

    /**
     * The column <code>proposta.propriedade.area</code>.
     */
    public final TableField<PropriedadeRecord, BigDecimal> AREA = createField("area", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * Create a <code>proposta.propriedade</code> table reference
     */
    public Propriedade() {
        this(DSL.name("propriedade"), null);
    }

    /**
     * Create an aliased <code>proposta.propriedade</code> table reference
     */
    public Propriedade(String alias) {
        this(DSL.name(alias), PROPRIEDADE);
    }

    /**
     * Create an aliased <code>proposta.propriedade</code> table reference
     */
    public Propriedade(Name alias) {
        this(alias, PROPRIEDADE);
    }

    private Propriedade(Name alias, Table<PropriedadeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Propriedade(Name alias, Table<PropriedadeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Armazena a propriedade em uma determinada data"));
    }

    public <O extends Record> Propriedade(Table<O> child, ForeignKey<O, PropriedadeRecord> key) {
        super(child, key, PROPRIEDADE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Proposta.PROPOSTA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROPRIEDADE_PK, Indexes.UQ_PROPRIEDADE_GEOM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PropriedadeRecord> getPrimaryKey() {
        return Keys.PROPRIEDADE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PropriedadeRecord>> getKeys() {
        return Arrays.<UniqueKey<PropriedadeRecord>>asList(Keys.PROPRIEDADE_PK, Keys.UQ_PROPRIEDADE_GEOM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Propriedade as(String alias) {
        return new Propriedade(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Propriedade as(Name alias) {
        return new Propriedade(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Propriedade rename(String name) {
        return new Propriedade(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Propriedade rename(Name name) {
        return new Propriedade(name, null);
    }
}
